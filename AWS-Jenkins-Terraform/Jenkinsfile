pipeline {
  agent any

  environment {
    AWS_REGION = 'us-east-1'
    TF_VAR_region = 'us-east-1'
    TF_VAR_secret_id_for_backend = 'backend/terraform-creds' // Adjust based on your AWS Secrets Manager ID
  }

  options {
    timestamps()
  }

  stages {
    stage('Checkout') {
      steps {
        git url: 'https://github.com/tusharshukla211/azureDevops-Terraform-AKS-infra/tree/main', branch: 'main'
      }
    }

    stage('Setup AWS Credentials') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                          credentialsId: 'aws-creds']]) {
          sh '''
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            aws sts get-caller-identity
          '''
        }
      }
    }

    stage('Terraform Init') {
      steps {
        sh '''
          terraform init \
            -backend-config="bucket=tfstate-bucket-name" \
            -backend-config="key=eks/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=terraform-lock-table" \
            -backend-config="encrypt=true"
        '''
      }
    }

    stage('Terraform Plan') {
      steps {
        sh '''
          terraform plan -var-file="terraform.tfvars"
        '''
      }
    }

    stage('Terraform Apply') {
      steps {
        input message: "Do you want to apply changes?"
        sh '''
          terraform apply -auto-approve -var-file="terraform.tfvars"
        '''
      }
    }
  }

  post {
    always {
      cleanWs()
    }
    failure {
      mail to: 'devops-team@abc.com',
           subject: "Terraform Pipeline Failed",
           body: "Check Jenkins job: ${env.BUILD_URL}"
    }
  }
}
