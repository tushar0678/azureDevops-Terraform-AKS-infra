#pipeline triggered initially for locked core resources creation
trigger:
  branches:
    include:
    - main
    ##add additional branches
    #releases/*
  paths:
    include:
    - terraform-core/*

resources:
- repo: self

pool:
  vmImage: 'ubuntu-latest'

# Parameters
parameters:
  isRelease: false
  environment: 'dev'
  location: 'uksouth'
  serviceConnection: 'ENOVIA AKS ADO to DEV-GS-ENOVIA SUB'
  #condition: and(not(failed()), not(canceled()), eq(variables['build.sourceBranch'], 'refs/heads/main'))

# Stage-1: Preconditions
## Step-1: Assert that the current branch is based off of main
## Step-2: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines.)
## Step-3: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-4: Validate Terraform Manifests (terraform init, terraform validate)
stages:
# ================================================================================
# This stage runs pre-conditions at the start of the pipeline
# ================================================================================
- stage: Preconditions
  pool:
    vmImage: ubuntu-latest
  jobs:
    #Pre-condition: assert that the current branch is based off of main
    - job: Validate
      dependsOn: []
      steps:
      - bash: |
          # Pre-condition: assert that the current branch is based off of main
          if ! git merge-base --is-ancestor HEAD origin/main; then
            echo "Only prior main commits are allowed as releases. Exiting..." >&2
            exit 1
          fi
        failOnStderr: true
        displayName: 'Ensure branch is a valid release candidate'
        condition: '${{ parameters.isRelease }}'
    # Run terraform validation to detect .tf issues early.
    - job: TerraformValidateJob
      dependsOn: [Validate]
      continueOnError: false
      steps:
      - checkout: self
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: Bash@3
        displayName: 'Terraform Init'
        inputs:
          targetType: 'inline'
          script: |
            terraform init -backend=false
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false
      - task: TerraformTaskV3@3
        displayName: Terraform Validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false

# Stage-2: Deploy IAC
## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File from the relevant Keyvault
## Step-3: Terraform Initialize (State Storage to store in Azure Storage Account for Dev AKS Cluster)
## Step-4: Terraform Plan (Create Plan)
## Step-5: Terraform Apply (Use the plan created in previous step)
# ================================================================================
# This stage deploy the IACinfrastructure
# ================================================================================
- stage: DeployIAC
  dependsOn:
    - "Preconditions"
  jobs:
    - deployment: DeployIAC
      displayName: DeployIAC
      pool:
        vmImage: 'ubuntu-latest'
      environment: '${{ parameters.environment }}'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformTaskV3@3
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                backendServiceArm: '${{ parameters.serviceConnection }}'
                backendAzureRmResourceGroupName: 'DEV-GS-PLM-AKS-CORE' #refactor?
                backendAzureRmStorageAccountName: 'devuksaksfiles' #refactor?
                backendAzureRmContainerName: 'tfstatefiles'
                backendAzureRmKey: 'aks-${{ parameters.environment }}.tfstate'
                allowTelemetryCollection: false
            #- task: qetza.replacetokens.replacetokens-task.replacetokens@3
            #  displayName: 'Replace tokens and parameters'
            #  inputs:
            #    rootDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
            #    targetFiles: '**/*.yaml'
            #    escapeType: none
            #    keepToken: true
            #    tokenPrefix: '__'
            #    tokenSuffix: '__'
            - task: TerraformTaskV3@3
              displayName: Terraform Plan
              inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                commandOptions: '-var environment=${{ parameters.environment }} -var location=${{ parameters.location }} -out $(Pipeline.Workspace)/terraform-manifests-out/${{ parameters.environment }}-$(Build.BuildId).out'
                environmentServiceNameAzureRM: '${{ parameters.serviceConnection }}'
                allowTelemetryCollection: false
            - task: Bash@3
              displayName: 'Terraform Graph'
              inputs:
                targetType: 'inline'
                script: |
                  sudo apt-get update -y
                  sudo apt-get install graphviz -y
                  terraform graph | dot -Tpng > terra-infra.png
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                allowTelemetryCollection: false
            - task: TerraformTaskV3@3
              displayName: Terraform apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/${{ parameters.environment }}-$(Build.BuildId).out'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                environmentServiceNameAzureRM: '${{ parameters.serviceConnection }}'
                allowTelemetryCollection: false

# Stage-3: Delete Resources created - DISABLED for now
## Step-1: Perform Terraform Delete to validate that the core resources are not deleted...
# ================================================================================
# This stage remove the IAC infrastructure
# ================================================================================
#- stage: DestroyIAC
#  dependsOn:
#    - "DeployIAC"
#  jobs:
#    - job: DestroyIAC
#      displayName: DestroyIAC
#      steps:
#      - task: TerraformTaskV3@3
#        displayName: Terraform Init
#        inputs:
#          provider: 'azurerm'
#          command: 'init'
#          workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
#          backendServiceArm: '${{ parameters.serviceConnection }}'
#          backendAzureRmResourceGroupName: 'DEV-GS-PLM-AKS-CORE' #refactor?
#          backendAzureRmStorageAccountName: 'devuksaksfiles' #refactor?
#          backendAzureRmContainerName: 'tfstatefiles'
#          backendAzureRmKey: 'aks-${{ parameters.environment }}.tfstate'
#          allowTelemetryCollection: false
#      - task: TerraformTaskV3@3
#        displayName: Terraform Destroy
#        inputs:
#          provider: 'azurerm'
#          command: 'destroy'
#          commandOptions: '--auto-approve'
#          workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
#          environmentServiceNameAzureRM: '${{ parameters.serviceConnection }}'
#          allowTelemetryCollection: false
